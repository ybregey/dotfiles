ch_mongo() {
  echo "db.setLogLevel(1) # log queries"
}

ch_db() {
 echo "PGPASSWORD=<password> createdb   -h <host> --username <username> <database>"
 echo "PGPASSWORD=<password> dropdb     -h <host> --username <username> <database>"
 echo "PGPASSWORD=<password> pg_dump    -h <host> --username <username> --verbose --clean --no-owner --no-acl -Z4 -Fc <database> > <dump_filename>"
 echo "PGPASSWORD=<password> pg_restore -h <host> --username <username> --verbose --clean --no-owner --no-acl -j <jobs> -d <database> <dump_filename>"
}

ch_rails() {
  echo "app.post(url, params: {message: "message"}, headers: {authorization: "token" })"
}

ch_curl() {
  echo "curl -X POST -F 'username=davidwalsh' -F 'password=something' http://domain.tld/post-to-me.php"
  echo "curl -X POST 'https://connect.calamp.co.uk/connect/services/login?useAuthToken=true' --header 'calamp-services-app: d8b98aad-cc6e-4899-a86d-e2848eaf03b4' -d 'username=ohcalampctcapi&password=Changeme123!'"
}

ch_sidekiq() {
  echo "
    require "sidekiq/api"

    Sidekiq::RetrySet.new.clear
    Sidekiq::ScheduledSet.new.clear
    Sidekiq::DeadSet.new.clear
    Sidekiq::Stats.new.reset # clear 'Processed' and 'Failed' jobs

    Sidekiq::Stats.new.fetch_stats!
    Sidekiq::Stats.new.queues # {"mailers"=>25, "default"=>1}
    Sidekiq::Stats.new.processed
    Sidekiq::Stats::History.new(2, Date.parse('2019-02-05')).processed

    queue = Sidekiq::Queue.new("notification")
    queue.count
    queue.each { |job| job.item } # hash content
    # queue.clear

    # redis
    Sidekiq.redis { |redis| redis.keys }
  "
}

ch_docker() {
  echo '
  # remove docker containers
  docker ps -a
  docker rm $(docker ps -qa --no-trunc --filter "status=exited")

  # remove docker images
  docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

  # delete volumes:
  docker volume rm $(docker volume ls -qf dangling=true)
  '
}

ch_git() {
  echo "
    git rebase -s recursive -X <ours/theirs>
  "
}

ch_jsonb() {
  echo "
    Operator	Right	Operand	Type	Description	Example
    @>	jsonb	Does the left JSON value contain within it the right value?	'{"a":1, "b":2}'::jsonb @> '{"b":2}'::jsonb
    <@	jsonb	Is the left JSON value contained within the right value?	'{"b":2}'::jsonb <@ '{"a":1, "b":2}'::jsonb
    ?	text	Does the key/element string exist within the JSON value?	'{"a":1, "b":2}'::jsonb ? 'b'
    ?|	text[]	Do any of these key/element strings exist?	'{"a":1, "b":2, "c":3}'::jsonb ?| array['b', 'c']
    ?&	text[]	Do all of these key/element strings exist?	'["a", "b"]'::jsonb ?& array['a', 'b']
  "
}
