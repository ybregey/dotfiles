export GEM_EDITOR="atom"
export DISABLE_SPRING=1
export BUNDLE_JOBS=$(nproc)

# from https://madebynathan.com/2012/12/18/automatically-run-bundle-install-if-bundler-raises-gemnotfound/
bundle_install_wrapper() {
  # Run command
  eval "$@"
  if [ $? = 7 ]; then
    # If command crashes, try a bundle install
    echo -e "\033[1;31m'$@' failed with exit code 7."
    echo    "This probably means that your system is missing gems defined in your Gemfile."
    echo -e "Executing 'bundle install'...\033[0m"
    bundle install
    # If bundle install was successful, try running command again.
    if [ $? = 0 ]; then
      echo "'bundle install' was successful. Retrying '$@'..."
      eval "$@"
    fi
  fi
}

alias bi="bundle install"
alias be="bundle exec"
alias bw="bundle_install_wrapper"
alias rs="bw be rails server"
alias rc="bw be rails console"
alias brake="bw be rake"

alias tenv="RACK_ENV=test RAILS_ENV=test HANAMI_ENV=test NODE_ENV=test NOCOV=1 BULLET_ENABLED=false" # NOCOV no coverage
alias tbe="tenv bw be"
alias bet="tenv bw be"
alias ptdb="tbe rails db:drop && tbe rails db:create && tbe rails db:schema:load"
alias t="tbe rspec "
alias tbullet="BULLET_ENABLED=true t"
alias tdebug="LOG_LEVEL=debug t"
tof() {
  tbe rspec $@ --only-failures
}

alias rrg="rails routes | grep"

#t() {
#  if [ -f Gemfile ]; then
#     tbe rspec $1
#  elif [ -f mix.exs ]; then
#     mix test $1
#  else
#     echo 'wtf?'
#  fi
#}

alias cop='be rubocop'
alias copa='be rubocop --auto-correct'

alias gem_open='EDITOR="atom --wait" bundle open'

alias redo_migration='rails db:migrate:redo'

dbm_up() {
  rails db:migrate:up VERSION=$1
}

dbm_down() {
  rails db:migrate:down VERSION=$1
}

# redefined per project:
#alias ptdb='RET rdd && RET rdc && RET rdm' # prepare test db

compose() {
  rails new $1 -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb
}

minirails() {
  echo "rails new <app name> --api --skip-keeps --skip-action-mailer --skip-action-mailbox --skip-action-text --skip-active-storage --skip-action-cable --skip-sprockets --skip-spring --skip-listen --skip-javascript --skip-turbolinks --skip-test --skip-system-test"
}

bake() {
  bundle exec rake $@
}

migrations_status() {
  echo "rake db:migrate:status"
  rake db:migrate:status
}

db_version() {
  echo "rake db:version"
  rake db:version
}

rubodiff() {
  git diff-tree -r --no-commit-id --name-only head origin/qa | xargs bundle exec rubocop
}

pronto_run() {
  bundle exec pronto run --exit-code --commit=$1 --runner --force-exclusion brakeman rubocop reek flay fasterer
}

reset_pk_sequence() {
 echo "ActiveRecord::Base.connection.reset_pk_sequence!('users')"
}

loger() {
  echo "
    ActiveRecord::Base.logger = Logger.new(\$stdout)
    Mongo::Logger.logger.level = Logger::DEBUG
   "
}
